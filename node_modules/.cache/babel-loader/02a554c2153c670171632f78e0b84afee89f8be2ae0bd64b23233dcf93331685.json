{"ast":null,"code":"import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { baseQuery } from \"./settings\";\nexport const casesApi = createApi({\n  reducerPath: \"casesApi\",\n  baseQuery,\n  tagTypes: [\"orders\", \"order\"],\n  endpoints: build => ({\n    getSpecializations: build.query({\n      query: () => ({\n        url: `/specialization/`,\n        method: \"GET\"\n      })\n    }),\n    getOrders: build.query({\n      query: id => ({\n        url: `/order/?search=<Строка поиска>&filter=[<Массив с названиями категорий>]&page=${id}`,\n        method: \"GET\"\n      }),\n      providesTags: () => [\"orders\"]\n    }),\n    getOrder: build.query({\n      query: id => ({\n        url: `/order/${id}`,\n        method: \"GET\"\n      }),\n      providesTags: () => [\"order\"]\n    }),\n    сreateResponse: build.mutation({\n      query: body => ({\n        url: `/executor/response`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    }),\n    archiveOrder: build.mutation({\n      query: body => ({\n        url: `/order/archive`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    }),\n    activeOrder: build.mutation({\n      query: body => ({\n        url: `/order/active`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    }),\n    createOrder: build.mutation({\n      query: body => ({\n        url: `/order/create`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: [\"orders\"]\n    }),\n    updateOrder: build.mutation({\n      query: body => ({\n        url: `/order/update`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: [\"orders\", \"order\"]\n    }),\n    checkFile: build.mutation({\n      query: body => ({\n        url: `/file/upload`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    }),\n    getMyOrders: build.query({\n      query: _ref => {\n        let {\n          filter,\n          page\n        } = _ref;\n        return {\n          url: `/order/my?filter=${filter}&page=${page}`,\n          method: \"GET\"\n        };\n      },\n      providesTags: () => [\"orders\"]\n    }),\n    pickExecutor: build.mutation({\n      query: body => ({\n        url: `customer/pick`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    }),\n    unpickExecutor: build.mutation({\n      query: body => ({\n        url: `/customer/unpick`,\n        method: \"POST\",\n        body: body\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"]\n    })\n  })\n});","map":{"version":3,"names":["createApi","baseQuery","casesApi","reducerPath","tagTypes","endpoints","build","getSpecializations","query","url","method","getOrders","id","providesTags","getOrder","сreateResponse","mutation","body","invalidatesTags","archiveOrder","activeOrder","createOrder","updateOrder","checkFile","getMyOrders","_ref","filter","page","pickExecutor","unpickExecutor"],"sources":["/Users/mironuxa/Documents/GitHub/opportunity-cup-frontend/src/services/casesService.ts"],"sourcesContent":["import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { baseQuery } from \"./settings\";\nimport {\n  getSpecializationsData,\n  getOrdersData,\n  getOrderData,\n  createResponseProps,\n  archiveOrder,\n} from \"../types/casesTypes\";\n\nexport const casesApi = createApi({\n  reducerPath: \"casesApi\",\n  baseQuery,\n  tagTypes: [\"orders\", \"order\"],\n  endpoints: (build) => ({\n    getSpecializations: build.query<getSpecializationsData, void>({\n      query: () => ({\n        url: `/specialization/`,\n        method: \"GET\",\n      }),\n    }),\n    getOrders: build.query<\n      { orders: getOrdersData[]; count: number },\n      { page: number; seacrh: string; filter: string }\n    >({\n      query: (id) => ({\n        url: `/order/?search=<Строка поиска>&filter=[<Массив с названиями категорий>]&page=${id}`,\n        method: \"GET\",\n      }),\n      providesTags: () => [\"orders\"],\n    }),\n    getOrder: build.query<getOrderData, string>({\n      query: (id) => ({\n        url: `/order/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: () => [\"order\"],\n    }),\n    сreateResponse: build.mutation<getOrderData, createResponseProps>({\n      query: (body) => ({\n        url: `/executor/response`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n    archiveOrder: build.mutation<any, archiveOrder>({\n      query: (body) => ({\n        url: `/order/archive`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n    activeOrder: build.mutation<any, archiveOrder>({\n      query: (body) => ({\n        url: `/order/active`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n    createOrder: build.mutation<any, any>({\n      query: (body) => ({\n        url: `/order/create`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: [\"orders\"],\n    }),\n    updateOrder: build.mutation<any, any>({\n      query: (body) => ({\n        url: `/order/update`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: [\"orders\", \"order\"],\n    }),\n    checkFile: build.mutation<{ files: string[] }, any>({\n      query: (body) => ({\n        url: `/file/upload`,\n        method: \"POST\",\n        body: body,\n      }),\n\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n    getMyOrders: build.query<\n      { count: number; orders: getOrdersData[] },\n      { filter: string; page: number }\n    >({\n      query: ({ filter, page }) => ({\n        url: `/order/my?filter=${filter}&page=${page}`,\n        method: \"GET\",\n      }),\n      providesTags: () => [\"orders\"],\n    }),\n    pickExecutor: build.mutation<\n      any,\n      {\n        orderId: string;\n        responseId: string;\n      }\n    >({\n      query: (body) => ({\n        url: `customer/pick`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n    unpickExecutor: build.mutation<\n      any,\n      {\n        orderId: string;\n        responseId: string;\n      }\n    >({\n      query: (body) => ({\n        url: `/customer/unpick`,\n        method: \"POST\",\n        body: body,\n      }),\n      invalidatesTags: () => [\"orders\", \"order\"],\n    }),\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}