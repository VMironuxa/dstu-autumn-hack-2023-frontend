{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './settings';\nexport const rustApi = createApi({\n  reducerPath: 'rustApi',\n  baseQuery,\n  tagTypes: ['banList', 'shop', 'leaders'],\n  endpoints: build => ({\n    getServers: build.query({\n      query: () => ({\n        url: `servers`,\n        method: 'GET'\n      })\n    }),\n    getBanList: build.query({\n      query: _ref => {\n        let {\n          page,\n          count,\n          searchValue\n        } = _ref;\n        return {\n          url: `servers/ban`,\n          method: 'GET',\n          params: {\n            page,\n            count,\n            searchValue\n          }\n        };\n      },\n      providesTags: () => ['banList']\n    }),\n    getShop: build.query({\n      query: id => ({\n        url: `store/catalog/${id}`,\n        method: 'GET'\n      }),\n      providesTags: () => ['shop']\n    }),\n    getTypeServers: build.query({\n      query: () => ({\n        url: `store/types`,\n        method: 'GET'\n      }),\n      providesTags: () => ['shop']\n    }),\n    getLeaders: build.query({\n      query: _ref2 => {\n        let {\n          id,\n          page,\n          count\n        } = _ref2;\n        return {\n          url: `servers/leaders`,\n          method: 'GET',\n          params: {\n            page,\n            count,\n            id\n          }\n        };\n      },\n      providesTags: () => ['leaders']\n    }),\n    getLeadersTop: build.query({\n      query: id => ({\n        url: `servers/top/${id}`,\n        method: 'GET'\n      }),\n      providesTags: () => ['leaders']\n    }),\n    getServersByMode: build.query({\n      query: id => ({\n        url: `servers/server/${id ? id : ''}`,\n        method: 'GET'\n      })\n    })\n  })\n});","map":{"version":3,"names":["createApi","baseQuery","rustApi","reducerPath","tagTypes","endpoints","build","getServers","query","url","method","getBanList","_ref","page","count","searchValue","params","providesTags","getShop","id","getTypeServers","getLeaders","_ref2","getLeadersTop","getServersByMode"],"sources":["/Users/mironuxa/Documents/GitHub/opportunity-cup-frontend/src/services/rustServices.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './settings';\nimport {\n  monitoringServers,\n  getBanListItem,\n  getBanListParams,\n  getShopItem,\n  serversServer,\n  getTypeServersData,\n} from '../types/rustTypes';\nimport { getLeaders, getLeadersItem } from '../types/userTypes';\n\ninterface getLeadersParams {\n  count: number;\n  page: number;\n  id: number | undefined;\n}\n\nexport const rustApi = createApi({\n  reducerPath: 'rustApi',\n  baseQuery,\n  tagTypes: ['banList', 'shop', 'leaders'],\n  endpoints: build => ({\n    getServers: build.query<monitoringServers, void>({\n      query: () => ({\n        url: `servers`,\n        method: 'GET',\n      }),\n    }),\n    getBanList: build.query<{ banlist: getBanListItem[]; pages: number }, getBanListParams>({\n      query: ({ page, count, searchValue }) => ({\n        url: `servers/ban`,\n        method: 'GET',\n        params: {\n          page,\n          count,\n          searchValue,\n        },\n      }),\n      providesTags: () => ['banList'],\n    }),\n    getShop: build.query<getShopItem[], number>({\n      query: id => ({\n        url: `store/catalog/${id}`,\n        method: 'GET',\n      }),\n      providesTags: () => ['shop'],\n    }),\n    getTypeServers: build.query<getTypeServersData[], void>({\n      query: () => ({\n        url: `store/types`,\n        method: 'GET',\n      }),\n      providesTags: () => ['shop'],\n    }),\n    getLeaders: build.query<getLeaders, getLeadersParams>({\n      query: ({ id, page, count }) => ({\n        url: `servers/leaders`,\n        method: 'GET',\n        params: {\n          page,\n          count,\n          id,\n        },\n      }),\n      providesTags: () => ['leaders'],\n    }),\n    getLeadersTop: build.query<getLeadersItem[], number | null>({\n      query: (id: number | null) => ({\n        url: `servers/top/${id}`,\n        method: 'GET',\n      }),\n      providesTags: () => ['leaders'],\n    }),\n    getServersByMode: build.query<serversServer[], number | null | void>({\n      query: (id?: number | null) => ({\n        url: `servers/server/${id ? id : ''}`,\n        method: 'GET',\n      }),\n    }),\n  }),\n});\n"],"mappings":"AAAA,SAASA,SAAS,QAAwB,8BAA8B;AACxE,SAASC,SAAS,QAAQ,YAAY;AAiBtC,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,SAAS;EACtBF,SAAS;EACTG,QAAQ,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;EACxCC,SAAS,EAAEC,KAAK,KAAK;IACnBC,UAAU,EAAED,KAAK,CAACE,KAAK,CAA0B;MAC/CA,KAAK,EAAEA,CAAA,MAAO;QACZC,GAAG,EAAG,SAAQ;QACdC,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;IACFC,UAAU,EAAEL,KAAK,CAACE,KAAK,CAAiE;MACtFA,KAAK,EAAEI,IAAA;QAAA,IAAC;UAAEC,IAAI;UAAEC,KAAK;UAAEC;QAAY,CAAC,GAAAH,IAAA;QAAA,OAAM;UACxCH,GAAG,EAAG,aAAY;UAClBC,MAAM,EAAE,KAAK;UACbM,MAAM,EAAE;YACNH,IAAI;YACJC,KAAK;YACLC;UACF;QACF,CAAC;MAAA,CAAC;MACFE,YAAY,EAAEA,CAAA,KAAM,CAAC,SAAS;IAChC,CAAC,CAAC;IACFC,OAAO,EAAEZ,KAAK,CAACE,KAAK,CAAwB;MAC1CA,KAAK,EAAEW,EAAE,KAAK;QACZV,GAAG,EAAG,iBAAgBU,EAAG,EAAC;QAC1BT,MAAM,EAAE;MACV,CAAC,CAAC;MACFO,YAAY,EAAEA,CAAA,KAAM,CAAC,MAAM;IAC7B,CAAC,CAAC;IACFG,cAAc,EAAEd,KAAK,CAACE,KAAK,CAA6B;MACtDA,KAAK,EAAEA,CAAA,MAAO;QACZC,GAAG,EAAG,aAAY;QAClBC,MAAM,EAAE;MACV,CAAC,CAAC;MACFO,YAAY,EAAEA,CAAA,KAAM,CAAC,MAAM;IAC7B,CAAC,CAAC;IACFI,UAAU,EAAEf,KAAK,CAACE,KAAK,CAA+B;MACpDA,KAAK,EAAEc,KAAA;QAAA,IAAC;UAAEH,EAAE;UAAEN,IAAI;UAAEC;QAAM,CAAC,GAAAQ,KAAA;QAAA,OAAM;UAC/Bb,GAAG,EAAG,iBAAgB;UACtBC,MAAM,EAAE,KAAK;UACbM,MAAM,EAAE;YACNH,IAAI;YACJC,KAAK;YACLK;UACF;QACF,CAAC;MAAA,CAAC;MACFF,YAAY,EAAEA,CAAA,KAAM,CAAC,SAAS;IAChC,CAAC,CAAC;IACFM,aAAa,EAAEjB,KAAK,CAACE,KAAK,CAAkC;MAC1DA,KAAK,EAAGW,EAAiB,KAAM;QAC7BV,GAAG,EAAG,eAAcU,EAAG,EAAC;QACxBT,MAAM,EAAE;MACV,CAAC,CAAC;MACFO,YAAY,EAAEA,CAAA,KAAM,CAAC,SAAS;IAChC,CAAC,CAAC;IACFO,gBAAgB,EAAElB,KAAK,CAACE,KAAK,CAAwC;MACnEA,KAAK,EAAGW,EAAkB,KAAM;QAC9BV,GAAG,EAAG,kBAAiBU,EAAE,GAAGA,EAAE,GAAG,EAAG,EAAC;QACrCT,MAAM,EAAE;MACV,CAAC;IACH,CAAC;EACH,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}