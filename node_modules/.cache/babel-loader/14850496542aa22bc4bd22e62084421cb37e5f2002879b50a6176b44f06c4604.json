{"ast":null,"code":"var _jsxFileName = \"/Users/mironuxa/Documents/GitHub/opportunity-cup-frontend/src/components/Shop/Modals/ChangeServer.tsx\",\n  _s2 = $RefreshSig$();\nimport CustomSelect from '../../UI/CustomSelect';\nimport { rustApi } from '../../../services/rustServices';\nimport { useLang } from '../../../hooks/useLang';\nimport { serviceModalChangeServerInInventory, serviceModalChangeServerTitle } from '../../../consts/modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChangeServer = _ref => {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    setSelectedServer\n  } = _ref;\n  const {\n    data: infoOfSelect,\n    isLoading\n  } = rustApi.useGetServersByModeQuery(Number(localStorage.getItem('section')));\n  const handleChange = event => {\n    setSelectedServer(event.value);\n  };\n  const selectOptions = () => {\n    _s();\n    const servers = infoOfSelect ? infoOfSelect.map(item => {\n      return {\n        label: item.name,\n        value: String(item.id)\n      };\n    }) : [];\n    return [{\n      label: useLang(serviceModalChangeServerInInventory),\n      value: '0'\n    }, ...servers];\n  };\n  _s(selectOptions, \"cg9t+uFKnhlcGWPoMfmUijp90Fw=\", false, function () {\n    return [useLang];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"serverForActivation\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"serverForActivationTitle\",\n      children: useLang(serviceModalChangeServerTitle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n      options: selectOptions(),\n      onChange: handleChange,\n      menuPlacement: \"top\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChangeServer, \"LhOWYQvpzXE4GNHfJtZup9CT+4o=\", false, function () {\n  return [rustApi.useGetServersByModeQuery, useLang];\n});\n_c = ChangeServer;\nexport default ChangeServer;\nvar _c;\n$RefreshReg$(_c, \"ChangeServer\");","map":{"version":3,"names":["CustomSelect","rustApi","useLang","serviceModalChangeServerInInventory","serviceModalChangeServerTitle","jsxDEV","_jsxDEV","ChangeServer","_ref","_s2","_s","$RefreshSig$","setSelectedServer","data","infoOfSelect","isLoading","useGetServersByModeQuery","Number","localStorage","getItem","handleChange","event","value","selectOptions","servers","map","item","label","name","String","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","menuPlacement","_c","$RefreshReg$"],"sources":["/Users/mironuxa/Documents/GitHub/opportunity-cup-frontend/src/components/Shop/Modals/ChangeServer.tsx"],"sourcesContent":["import CustomSelect from '../../UI/CustomSelect';\nimport { rustApi } from '../../../services/rustServices';\nimport { useLang } from '../../../hooks/useLang';\nimport { serviceModalChangeServerInInventory, serviceModalChangeServerTitle } from '../../../consts/modal';\n\ninterface ChangeServerProps {\n  setSelectedServer: (value: number) => void;\n}\nconst ChangeServer = ({ setSelectedServer }: ChangeServerProps) => {\n  const { data: infoOfSelect, isLoading } = rustApi.useGetServersByModeQuery(Number(localStorage.getItem('section')));\n  const handleChange = (event: any) => {\n    setSelectedServer(event.value);\n  };\n\n  const selectOptions = () => {\n    const servers = infoOfSelect\n      ? infoOfSelect.map((item: any) => {\n          return {\n            label: item.name,\n            value: String(item.id),\n          };\n        })\n      : [];\n    return [\n      {\n        label: useLang(serviceModalChangeServerInInventory),\n        value: '0',\n      },\n      ...servers,\n    ];\n  };\n  return (\n    <div className=\"serverForActivation\">\n      <span className=\"serverForActivationTitle\">{useLang(serviceModalChangeServerTitle)}</span>\n      <CustomSelect options={selectOptions()} onChange={handleChange} menuPlacement=\"top\" />\n    </div>\n  );\n};\nexport default ChangeServer;\n"],"mappings":";;AAAA,OAAOA,YAAY,MAAM,uBAAuB;AAChD,SAASC,OAAO,QAAQ,gCAAgC;AACxD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mCAAmC,EAAEC,6BAA6B,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK3G,MAAMC,YAAY,GAAGC,IAAA,IAA8C;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAA7C;IAAEC;EAAqC,CAAC,GAAAJ,IAAA;EAC5D,MAAM;IAAEK,IAAI,EAAEC,YAAY;IAAEC;EAAU,CAAC,GAAGd,OAAO,CAACe,wBAAwB,CAACC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;EACnH,MAAMC,YAAY,GAAIC,KAAU,IAAK;IACnCT,iBAAiB,CAACS,KAAK,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAAAb,EAAA;IAC1B,MAAMc,OAAO,GAAGV,YAAY,GACxBA,YAAY,CAACW,GAAG,CAAEC,IAAS,IAAK;MAC9B,OAAO;QACLC,KAAK,EAAED,IAAI,CAACE,IAAI;QAChBN,KAAK,EAAEO,MAAM,CAACH,IAAI,CAACI,EAAE;MACvB,CAAC;IACH,CAAC,CAAC,GACF,EAAE;IACN,OAAO,CACL;MACEH,KAAK,EAAEzB,OAAO,CAACC,mCAAmC,CAAC;MACnDmB,KAAK,EAAE;IACT,CAAC,EACD,GAAGE,OAAO,CACX;EACH,CAAC;EAACd,EAAA,CAhBIa,aAAa;IAAA,QAWNrB,OAAO;EAAA;EAMpB,oBACEI,OAAA;IAAKyB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC1B,OAAA;MAAMyB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EAAE9B,OAAO,CAACE,6BAA6B;IAAC;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC1F9B,OAAA,CAACN,YAAY;MAACqC,OAAO,EAAEd,aAAa,CAAC,CAAE;MAACe,QAAQ,EAAElB,YAAa;MAACmB,aAAa,EAAC;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnF,CAAC;AAEV,CAAC;AAAC3B,GAAA,CA7BIF,YAAY;EAAA,QAC0BN,OAAO,CAACe,wBAAwB,EAwB1Bd,OAAO;AAAA;AAAAsC,EAAA,GAzBnDjC,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}